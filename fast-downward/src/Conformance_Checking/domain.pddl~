(define (domain Mining)
(:requirements :derived-predicates :typing :equality)
(:types taskA taskB taskC - task)

;;
;;Basic Predicates
;;
(:predicates
(pre ?x - task ?y - task)
(traced ?x - task)
(first_task_of_the_trace ?x - task)
(last_task_of_the_trace ?x - task)

;;
;;DECLARE LTL rules
;;
(existence-taskA)
(absence-taskB)
)

;;
;;PLANNING ACTIONS
;;

;;
;;If the trace is empty, the action --addToTheEmptyTrace-- adds a task 'x1' (which is actually not in the trace) to the trace.
;;After the action happening, 'x1' will be contemporaneously the first and the last task of the trace.
;;

(:action addToTheEmptyTrace
:parameters (?x1 - task)
:precondition (not (exists (?x - task) (traced ?x)))
:effect (and (traced ?x1) (first_task_of_the_trace ?x1) (last_task_of_the_trace ?x1))
)

;;
;;If 'x1' is the first task of the trace, the action --addAtTheBeginning-- adds a task 'x2' (which is actually not in the trace) before 'x1'.
;;

(:action addAtTheBeginning
:parameters (?x1 - task ?x2 - task)
:precondition (and (traced ?x1) (not (traced ?x2)) (first_task_of_the_trace ?x1))
:effect (and (not (first_task_of_the_trace ?x1)) (first_task_of_the_trace ?x2) (traced ?x2) (pre ?x2 ?x1))
)

;;
;;If 'x1' is the last task of the trace, the action --addAtTheEnd-- adds a task 'x2' (which is actually not in the trace) after 'x1'.
;;

(:action addAtTheEnd
:parameters (?x1 - task ?x2 - task)
:precondition (and (traced ?x1) (not (traced ?x2)) (last_task_of_the_trace ?x1))
:effect (and (not (last_task_of_the_trace ?x1)) (last_task_of_the_trace ?x2) (traced ?x2) (pre ?x1 ?x2))
)

;;
;;The action --addBetween-- inserts the task 'x2' between the tasks 'x1' and 'x3' (that are already included in the trace).
;;After the action happening, two new couples of actions will be created: '(x1,x2)' and '(x2,x3)'.
;;

(:action addBetween
:parameters (?x1 - task ?x2 - task ?x3 - task)
:precondition (and (pre ?x1 ?x3) (not (traced ?x2)))
:effect (and (traced ?x2) (pre ?x1 ?x2) (pre ?x2 ?x3) (not (pre ?x1 ?x3)))
)

;;
;;The action --deleteSingleTask-- deletes the task 'x1', if 'x1' it is the only task in the trace.
;;

(:action deleteSingleTask
:parameters (?x1 - task)
:precondition (and (traced ?x1) (first_task_of_the_trace ?x1) (last_task_of_the_trace ?x1))
:effect (and (not (traced ?x1)) (not (last_task_of_the_trace ?x1)) (not (first_task_of_the_trace ?x1)))
)

;;
;;If 'x1' is the first task of the trace, and the task 'x2' follows 'x1', the action --deleteAtTheBeginning-- deletes 'x1' and makes 'x2' the new first task of the trace.
;;

(:action deleteAtTheBeginning
:parameters (?x1 - task ?x2 - task)
:precondition (and (traced ?x1) (traced ?x2) (pre ?x1 ?x2) (first_task_of_the_trace ?x1))
:effect (and (not (traced ?x1)) (not (first_task_of_the_trace ?x1)) (first_task_of_the_trace ?x2) (not (pre ?x1 ?x2)))
)

;;
;;If 'x2' is the last task of the trace, and the task 'x2' follows 'x1', the action --deleteAtTheEnd-- deletes 'x2' and makes 'x1' the new last task of the trace.
;;

(:action deleteAtTheEnd
:parameters (?x1 - task ?x2 - task)
:precondition (and (traced ?x1) (traced ?x2) (pre ?x1 ?x2) (last_task_of_the_trace ?x2))
:effect (and (not (traced ?x2)) (not (last_task_of_the_trace ?x2)) (last_task_of_the_trace ?x1) (not (pre ?x1 ?x2)))
)

;;
;;The action --deleteBetween-- deletes the task x2 that was previously situated between the tasks x1 and x3.
;;

(:action deleteBetween
:parameters (?x1 - task ?x2 - task ?x3 - task)
:precondition (and (traced ?x1) (traced ?x2) (traced ?x3) (pre ?x1 ?x2) (pre ?x2 ?x3))
:effect (and (not (traced ?x2)) (not (pre ?x1 ?x2)) (not (pre ?x2 ?x3)) (pre ?x1 ?x3))
)

;;
;;EXISTENCE-taskA - (FINALLY taskA) - An instance of the task taskA must occur at least once in the trace.
;;

(:derived (existence-taskA)
(exists (?t - taskA) (traced ?t)))

;;
;;ABSENCE-taskB - (NOT (FINALLY taskB)) - taskB never occur in the trace.
;;

(:derived (absence-taskB)
(not (exists (?t - taskB) (traced ?t))))

)